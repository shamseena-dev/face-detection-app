{"version":3,"sources":["logo.png","kids.JPG","sample.JPG","components/Navbar/Navbar.js","components/Home/Home.js","components/ImageInputForm/ImageInputForm.js","components/ImageDisplay/ImageDisplay.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","style","Home","color","ImageInputForm","onInputChange","onButtonSubmit","type","placeholder","onChange","onClick","ImageDisplay","imageUrl","facelist","boxes","map","box","index","key","top","toprow","bottom","bottomrow","right","rightcol","left","leftcol","id","width","height","Footer","href","app","Clarifai","App","apiKey","calculateFacePosition","data","clarifaiFace_Array","outputs","regions","image","document","getElementById","Number","face","region_info","bounding_box","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","preventDefault","input","target","value","e","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","sample","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2afb891d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.56eda55e.png\";","module.exports = __webpack_public_path__ + \"static/media/kids.f210ea39.JPG\";","module.exports = __webpack_public_path__ + \"static/media/sample.da9515ae.JPG\";","import React from 'react';\r\nimport logo from '../../logo.png';\r\nimport \"./navbar.css\";\r\n\r\n\r\nfunction Navbar() {\r\n  return (\r\n     <nav className=\"darken-3 navbar black navbar-div\">\r\n      <img src={logo} alt=\"logo\" style={{\"width\":\"60px\",\"height\":\"auto\"}} className=\"left logo-img\"/>\r\n      <h4 className=\"center\"> FACE DETECTION APP </h4>\r\n      {/*\r\n      <button type=\"button\" className=\"btn red right\">SIGN UP</button>\r\n      <button type=\"button\" className=\"btn red right\">REGISTER</button> */}\r\n       \r\n      </nav>\r\n    \r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport \"./home.css\";\r\nimport sample from \"../../sample.JPG\";\r\nfunction Home(){\r\n    return(\r\n    \t<div className=\"container caption\">\r\n      <h4> Enter Image link to detect <span style={{color:\"blue\"}}>Face</span> in it!!</h4>\r\n      \r\n      </div>\r\n    );\r\n}\r\nexport default Home;","import React from \"react\";\r\nimport \"./imageinputform.css\";\r\n\r\n    \r\n\r\nfunction ImageInputForm({ onInputChange, onButtonSubmit }) {\r\n \r\n  \r\n    \r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card darken-1 card-div\">\r\n      \r\n        <div className=\"card-content\">\r\n          <h6 className=\"white-text\">Add Image Link here:</h6>\r\n\r\n          <form >\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Add Image link...\"\r\n              \r\n             onChange={onInputChange}></input>\r\n  \r\n            <button className=\"btn waves-effect waves-light\" type=\"submit\" onClick={onButtonSubmit}>\r\n              Detect \r\n            </button>\r\n          \r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default ImageInputForm;\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\nimport \"./imageDisplay.css\";\r\n\r\n\r\n\r\nconst ImageDisplay =({ imageUrl, boxes }) =>{\r\n\t const facelist = boxes.map((box,index)=>{\r\n                   return <div key={index} className=\"bounding_box\" style={{top: box.toprow , bottom: box.bottomrow, right:box.rightcol,left:box.leftcol}}></div>\r\n                });\r\n    \r\n    \r\n          \r\n    return(\r\n        <div className=\"center card-div\">\r\n        <div className=\"absoluteDiv \">\r\n        <img id='inputimage' className=\"border-img\" alt='' src={imageUrl} width='500px' height='auto'/>\r\n         \r\n            \r\n            {facelist} \r\n            \r\n            \r\n            \r\n            \r\n            \r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageDisplay;","import React from 'react';\r\nimport \"./footer.css\";\r\nfunction Footer(){\r\n\treturn(\r\n\t\t  <footer className=\"page-footer footer-div\">\r\n\r\n\t\t  \r\n\t\t  <div className=\"copyright-div\">\r\n             Shamz Â© 2020 Copyright Reserved\r\n            <p className=\"grey-text text-lighten-4 right\" href=\"#!\">Powered by Clarifai API</p>\r\n            </div>\r\n         \r\n        </footer>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport {BrowserRouter , Route} from 'react-router-dom';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Home from \"./components/Home/Home\";\nimport './App.css';\nimport ImageInputForm from './components/ImageInputForm/ImageInputForm';\nimport ImageDisplay from './components/ImageDisplay/ImageDisplay';\nimport Clarifai from 'clarifai';\nimport Footer from './components/Footer/Footer';\n\nimport sample from \"./kids.JPG\";\n\nconst app = new Clarifai.App({apiKey: '4e2ee373c4444f918cb57d903b6843a1'});\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: sample,\n      boxes: [],\n      \n    }\n  }\n  calculateFacePosition = (data)=>{\n    const clarifaiFace_Array = data.outputs[0].data.regions;\n\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    const positions = clarifaiFace_Array.map(face =>{\n        \n        return {\n            leftcol: face.region_info.bounding_box.left_col * width,\n            toprow: face.region_info.bounding_box.top_row * height,\n            rightcol: width - (face.region_info.bounding_box.right_col * width),\n            bottomrow: height - (face.region_info.bounding_box.bottom_row * height)\n    }\n    });\n\n    return positions;\n  }\n  /*\n  calculateFacePosition = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftcol: clarifaiFace.left_col * width,\n      toprow: clarifaiFace.top_row * height,\n      rightcol: width - (clarifaiFace.right_col * width),\n      bottomrow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n  */\n\n  displayFaceBox = (boxes) => {\n    this.setState({boxes: boxes});\n    \n  }\n\n  onInputChange = (event) => {\n    event.preventDefault();\n    this.setState({input: event.target.value});\n  }\n  onButtonSubmit = (e) => {\n      e.preventDefault();\n    this.setState({imageUrl: this.state.input});\n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL,\n        this.state.input)\n      .then(response => {\n        \n        this.displayFaceBox(this.calculateFacePosition(response))\n      })\n      .catch(err => console.log(err));\n  }\n  render() {\n    const {  imageUrl, boxes } = this.state;\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <Navbar />\n      <Home />\n      <ImageInputForm  onInputChange={this.onInputChange}\n                onButtonSubmit={this.onButtonSubmit}/>\n      <ImageDisplay boxes={boxes} imageUrl={imageUrl}/>\n      \n      <Footer />\n    </div>\n    </BrowserRouter>\n    \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}